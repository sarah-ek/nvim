snippet guard "script reload guard"
if exists('${1:did_`vim_snippets#Filename()`}') || &cp${2: || version < 700}
finish
endif
let $1 = 1${0}
endsnippet

snippet f "function"
function ${1:function_name}($2)
	${0}
endfunction
endsnippet

snippet t "try ... catch statement"
try
	${1:${VISUAL}}
catch ${2}
	${0}
endtry
endsnippet

snippet for "for ... in loop"
for ${1} in ${2}
	${0:${VISUAL}}
endfor
endsnippet

snippet forkv "for [key, value] in loop"
for [${1},${2}] in items(${3})
	${0}
endfor
endsnippet

snippet wh "while loop"
while ${1}
	${0:${VISUAL}}
endwhile
endsnippet

snippet if "if statement"
if ${1}
	${0:${VISUAL}}
endif
endsnippet

snippet ife "if ... else statement"
if ${1}
	${2:${VISUAL}}
else
	${0}
endif
endsnippet

snippet au "augroup ... autocmd block"
augroup ${1:AU_NAME}
	" this one is which you're most likely to use?
	autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}
augroup end
endsnippet

snippet plug "vim-plug Plugin definition"
Plug '${0}'
endsnippet

snippet plugdo "vim-plug Plugin definition with { 'do': '' }"
Plug '${1}', { 'do': '${0}' }
endsnippet

snippet plugon "vim-plug Plugin definition with { 'on': '' }"
Plug '${1}', { 'on': '${0}' }
endsnippet

snippet plugfor "vim-plug Plugin definition with { 'for': '' }"
Plug '${1}', { 'for': '${0}' }
endsnippet

snippet plugbr "vim-plug Plugin definition with { 'branch': '' }"
Plug '${1}', { 'branch': '${0}' }
endsnippet

snippet plugtag "vim-plug Plugin definition with { 'tag': '' }"
Plug '${1}', { 'tag': '${0}' }
endsnippet

